{"name":"emi.lcg-util","version":"1.11.19","documentationLinks":["http:\/\/www.eu-emi.eu\/emi-1-kebnekaise-updates\/-\/asset_publisher\/Ir6q\/content\/update-10-24-11-2011#GFAL_lcg_util_v_1_11_19_task_225"],"target":[{"id":88,"productId":109,"platform":"sl5","arch":"x86_64","repositoryURL":"sw\/production\/umd\/1\/sl5\/x86_64\/updates","gpgkey":null,"rpms":[],"apicallback":"http:\/\/admin-repo.egi.eu\/api\/report\/release\/xml?id=3186","status":1}],"capabilities":["Client Tools"],"currentState":"deployed","technologyProvider":"European Middleware Initiative","contact":"cristina.aiftimiei@pd.infn.it","technicalContact":"cristina.aiftimiei@pd.infn.it","description":"\n\nThe Grid File Access Library (GFAL) is a library that offers to the user a POSIX-like interface to access data on various flavours of Storage Elements offering an SRM interface. GFAL is interfaced to SRM-compliant back-ends (both v1.1 and v2.2) and storage systems such as Castor, dCache or DPM in which case the relevant protocol is used transparently behind the scenes. Using information published in the information system, it resolves relevant abstract domain data\/file names so that the physical data access as well as the end-points of services are achievable transparently. It allows and unifies access to various types of items such as: LFN, GUID, SURL, SRM and TURL or local path. In addition, some of the crucial, yet common, backend calls are exposed through the library so that users are not limited to POSIX mapping to do specific calls e.g. to reserve space or pin a file. The pluggable architecture of the library permits dynamic change of the versions of some of the supported protocols (i.e. rfio, dCache) without need of redeployment. \n\nlcg_utils was used to create Grid equivalents of UNIX copy commands and file registration that can span two storage systems and catalogues of choice (i.e. LFC, EDG). Other functions have been implemented, such as getting the list of file replicas from many sources, performing lookups on LFNs or GUIDs, changing the status of the file or finally removing it from the Grid. The choice of commands implemented was user driven and is often on the first frontier for the Grid user or Grid testers. lcg_utils is both the C library and simple command-line programs based on this library. It consists of 16 calls and Unix command line programs wrapping them. \n\n","releaseDate":"2011-12-19 12:08:42","majorVersion":1,"minorVersion":11,"revisionVersion":19,"releaseNotes":"\n\nWhat's New:\n\nBugfix release, mainly to fix gSOAP log file generation problem and some regressions after integrating the new shared libraries (is-interface, gridftp-ifce). Bugs submitted by externals (users).\n\n    lcg-cp sometimes leaves behind it an empty file when the transfer fails\n\n    Memory corruption in is-interface\n\n    lcg-stmd Segmentation Fault version 1.11.18-2.sl5\n\n    lcg-gt sends the set of environment variables in the SRM request\n\n    lcg-cr and lcg-cp commands list of bdii's issue\n\n    SOAP generates too much log files\n\n    Add a \"last chance\" check shortly before the final timeout in case of exponential backoff\n\nBugs submitted by developers (tracked in Trac only).\n\n    lcg-stmd fatal error with cannot allocate memory\n\n    support 32bits platforms\n\n    local gcreen build failed (EMI build)\n\n    gsoap-devel must be a dependency of lcgutil in EMI\n\n    Add unit test suite to is-interface\n\n    is-interface should not depend on Globus\n\n    Consolidate is-interface file names\n\n    Add \"sd_is_online\" function to is-interface\n\n\n\nInstallation and configuration\n\n    Upgrading to GFAL_lcg_util 1.11.19:\n\n# sudo yum update lcg_util\n\n\n\nKnown issues\n\n    Multiple versions of Globus libraries loaded, problem tracked in Savannah bug #72833.\n\n        Symptom:\n\n            When using the non-threaded GFAL Python binding, the second call of a GFAL function using gfal_creat internally fails.\n\n        Reason\n\n            When using non-threaded gfal from python, (import gfal) and using RFIO access method, both the threaded and non-threaded Globus libraries are loaded, because the plugin handling the case uses threaded globus while non-threaded GFAL uses non-threaded Globus. This results the wrong behavior.\n\n        Workaround\n\n            Use the threaded GFAL version from Python. The following two lines do the trick:\n\nimport gfalthr\n\ngfal=gfalthr\n\n\n\n    Other issues - http:\/\/bit.ly\/eoVvHq\n\n                          ","changeLog":"\n\n                          Put the Change logs here (multiline field)\n\n                          ","repositoryURL":"sw\/production\/umd\/1","distributionType":"UMD","distributionVersion":"1.4.0","softwareConfigurationLink":""}